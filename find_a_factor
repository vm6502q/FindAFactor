#!/usr/bin/env python

import os
import sys
import time

from FindAFactor import find_a_factor, FactoringMethod

def main():
    argv_len = len(sys.argv)

    to_factor = 12953359405011071899
    method=FactoringMethod(int(os.environ.get('FINDAFACTOR_METHOD'))) if os.environ.get('FINDAFACTOR_METHOD') else FactoringMethod.PRIME_PROVER
    node_count=int(os.environ.get('FINDAFACTOR_NODE_COUNT')) if os.environ.get('FINDAFACTOR_NODE_COUNT') else 1
    node_id=int(os.environ.get('FINDAFACTOR_NODE_ID')) if os.environ.get('FINDAFACTOR_NODE_ID') else 0
    gear_factorization_level=int(os.environ.get('FINDAFACTOR_GEAR_FACTORIZATION_LEVEL')) if os.environ.get('FINDAFACTOR_GEAR_FACTORIZATION_LEVEL') else 19
    wheel_factorization_level=int(os.environ.get('FINDAFACTOR_WHEEL_FACTORIZATION_LEVEL')) if os.environ.get('FINDAFACTOR_WHEEL_FACTORIZATION_LEVEL') else 13
    sieving_bound_multiplier=float(os.environ.get('FINDAFACTOR_SIEVING_BOUND_MULTIPLIER')) if os.environ.get('FINDAFACTOR_SIEVING_BOUND_MULTIPLIER') else 1.0
    smoothness_bound_multiplier=float(os.environ.get('FINDAFACTOR_SMOOTHNESS_BOUND_MULTIPLIER')) if os.environ.get('FINDAFACTOR_SMOOTHNESS_BOUND_MULTIPLIER') else 1.0
    gaussian_elimination_row_offset=int(os.environ.get('FINDAFACTOR_GAUSSIAN_ELIMINATION_ROW_OFFSET')) if os.environ.get('FINDAFACTOR_GAUSSIAN_ELIMINATION_ROW_OFFSET') else 1

    if argv_len > 1:
        to_factor = int(sys.argv[1])
    if argv_len > 2:
        method = FactoringMethod(int(sys.argv[2]))
    if argv_len > 3:
        node_count = int(sys.argv[3])
    if argv_len > 4:
        node_id = int(sys.argv[4])
    if argv_len > 5:
        gear_factorization_level = int(sys.argv[5])
    if argv_len > 6:
        wheel_factorization_level = int(sys.argv[6])
    if argv_len > 7:
        sieving_bound_multiplier = float(sys.argv[7])
    if argv_len > 8:
        smoothness_bound_multiplier = float(sys.argv[8])
    if argv_len > 9:
        gaussian_elimination_row_offset = int(sys.argv[9])

    start = time.perf_counter()
    result = find_a_factor(
        to_factor,
        method = method,
        node_count=node_count,
        node_id=node_id,
        gear_factorization_level=gear_factorization_level,
        wheel_factorization_level=wheel_factorization_level,
        sieving_bound_multiplier=sieving_bound_multiplier,
        smoothness_bound_multiplier=smoothness_bound_multiplier,
        gaussian_elimination_row_offset=gaussian_elimination_row_offset
    )
    print(time.perf_counter() - start)
    print(str(result) + " * " + str(to_factor // result) + " == " + str(to_factor))
    print((result * (to_factor // result)) == to_factor)

    return 0

if __name__ == '__main__':
    sys.exit(main())